<?php

/**
 * @file
 * Implements necessary hooks for Calendar Framework module, plus API and helper functions.
 */

/**
 * Thanks to the crowd at developmentseed,
 * There are some patterns here inspired by the SMS Framework.
 *
 * @see http://drupal.org/project/smsframework
 */

/**
 * Implements hook_perm().
 *
 * @ingroup hook_implementation
 */
function calendar_framework_perm() {
  return array(
    'select different calendar',
    'administer calendar framework',
  );
}


/**
 * Implements hook_init().
 *
 * @ingroup hook_implementation
 *
 * @todo
 *   Move this warning functionality to Status Reports
 *   page, and let the load off.
 */
function calendar_framework_init() {
  // Include helpers.
  module_load_include('inc', 'calendar_framework');

  if (!_calendar_framework_patch_applied()) {
    drupal_set_message(t('Even though the <a href="!link">Calendar Framework</a> module is enabled, it is useless till you properly apply the patch.',
      array('!link' => url('admin/settings/date-time/calendars'))
    ), 'warning', FALSE);
    drupal_set_message(t('And you are going to get this message till you apply the patch or disable the module.'), 'warning', FALSE);
  }
}


/**
 * Implements hook_menu().
 *
 * @ingroup hook_implementation
 */
function calendar_framework_menu() {
  $items = array();

  $items['admin/settings/date-time/calendars'] = array(
    'title' => 'Calendars',
    'description' => 'Configuration options for available calendars.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('calendar_framework_calendars_form'),
    'access arguments' => array('administer calendar framework'),
    'file' => 'calendar_framework.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 3,
  );

  $items['admin/settings/date-time/calendars/%'] = array(
    'title callback' => 'calendar_framework_calendar_title',
    'title arguments' => array(4),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('calendar_framework_calendar_form', 4),
    'access arguments' => array('administer calendar framework'),
    'file' => 'calendar_framework.admin.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;
}


/**
 * Implements hook_menu_alter().
 */
function calendar_framework_menu_alter($items) {
  $items['admin/settings/date-time/date-time'] = $items['admin/settings/date-time'];
  $items['admin/settings/date-time/date-time']['type'] = MENU_DEFAULT_LOCAL_TASK;
  $items['admin/settings/date-time']['type'] = MENU_NORMAL_ITEM;
}


/**
 * Calendar menu title callback.
 *
 * @param $identifier
 *   Calendar identifier.
 *
 * @return
 *   Calendar menu title.
 *
 * @ingroup title_callback
 */
function calendar_framework_calendar_title($identifier) {
  return sprintf('%s Calendar', calendar_framework_calendars('name', $identifier));
}


/**
 * Implements hook_patch().
 *
 * @ingroup hook_implementation
 *
 * @see http://drupal.org/project/patchdoq
 * @see http://doques.net/node/367
 */
function calendar_framework_patch() {
  // Include helpers.
  module_load_include('inc', 'calendar_framework');

  $patchdoq = array();
  $patches = _calendar_framework_patch_info();

  foreach ($patches as $identifier => $patch) {
    $patchdoq[$identifier] = array(
      'name' => $patch['title'],
      'description' => $patch['description'],
      'file' => $patch['path'] . $patch['name'],
      'patch arguments' => '-p0',
    );
  }

  return $patchdoq;
}


/**
 * Implements hook_format_date().
 *
 * This is a temporary hook implementation which employs a procedural concept of
 * Factory design pattern until we all get a better format_date() function at Drupal core.
 * Till those days we need to patch the includes/common.inc file to provide
 * the ability to implement hook_format_date().
 *
 * @param $timestamp
 *   Unix timestamp to be formatted.
 *   Don't worry, the proper timezone value has been added to this by format_date().
 * @param $format
 *   PHP date() function format string.
 * @param $langcode
 *   Optional language code to translate to a language other than the default.
 *
 * @return
 *   The formatted date or FALSE otherwise.
 *
 * @ingroup hook_implementation
 *
 * @see format_date()
 * @see calendar_framework_patch()
 * @see patch/common.inc-format_date.d6.patch
 */
function calendar_framework_format_date($timestamp, $format, $timezone = NULL, $langcode = NULL) {
  // Get the best-fit calendar for current
  // user/language and call its formatter callback.
  $calendar = _calendar_framework_select();
  if (isset($calendar['format callback']) && function_exists($calendar['format callback'])) {
    return $calendar['format callback']($timestamp, $format, $timezone, $langcode, $calendar);
  }

  return FALSE;
}


/**
 * Implements hook_user().
 *
 * Adds user specific calendar configuration.
 *
 * @ingroup hook_implementation
 */
function calendar_framework_user($op, &$edit, &$account, $category = NULL) {
  if ($op != 'form' || $category != 'account' || !user_access('select different calendar')) {
    return;
  }

  $form = array();
  $calendars = calendar_framework_calendars('names');

  $form['timezone']['calendar'] = array(
    '#type' => 'select',
    '#title' => t('Default calendar'),
    '#description' => t('Selecting a different calendar will change all dates across the site.'),
    '#access' => user_access('select different calendar'),
    '#options' => $calendars += array('default' => t('Site default calendar')),
    '#default_value' => $account->calendar ? $account->calendar : 'default',
  );

  return $form;
}


/**
 * Implements hook_form_alter().
 *
 * Alters locale_languages_overview_form to inject calendar options.
 *
 * @ingroup hook_implementation
 */
function calendar_framework_form_alter(&$form, $form_state, $form_id) {
  if ($form_id != 'locale_languages_overview_form') {
    return;
  }

  // Get a list system calendar names.
  $calendars = calendar_framework_calendars('names');

  // For each language add a dropdown list,
  // to let the user choose desired calendar.
  $form['calendar_framework_languages'] = array(
    '#tree' => TRUE,
  );

  foreach (array_keys($form['enabled']['#options']) as $lang) {
    $form['calendar_framework_languages'][$lang] = array(
      '#type' => 'select',
      '#access' => user_access('administer calendar framework'),
      '#options' => $calendars += array('default' => t('Default Calendar')),
      '#default_value' => variable_get('calendar_framework_' . $lang . '_calendar', 'default'),
    );
  }

  // Override the default themer callback.
  $form['#theme'] = 'calendar_framework_languages_overview_form';

  // And append a submission one.
  $form['#submit'][] = 'calendar_framework_languages_overview_form_submit';
}


/**
 * Submission callback for Locale language overview form.
 *
 * @ingroup form_submit
 */
function calendar_framework_languages_overview_form_submit($form, &$form_state) {
  foreach ($form_state['values']['calendar_framework_languages'] as $lang => $calendar_choice) {
    variable_set('calendar_framework_' . $lang . '_calendar', $calendar_choice);
  }
}


/**
 * Implements hook_theme().
 *
 * @ingroup hook_implementation
 */
function calendar_framework_theme() {
  return array(
    'calendar_framework_calendars_form' => array(
      'arguments' => array('form' => NULL),
      'file' => 'calendar_framework.admin.inc',
    ),
    'calendar_framework_languages_overview_form' => array(
      'arguments' => array('form' => NULL),
      'file' => 'calendar_framework.admin.inc',
    ),
  );
}


/**
 * API function to provide a list of all available calendars.
 *
 * @param $op
 *   The format of return list. Could be:
 *   - calendar: Returns information about calendar identified by $identifier.
 *   - calendars: Returns a list of all available calendar informations.
 *   - name: Return the name of a calendar identified by $identifier.
 *   - names: Returns a list of all available calendar names.
 *   - identifiers: Returns a list of available calendar identifiers.
 * @param $identifier
 *   A calendar identifier to filter the results.
 *
 * @return
 *   An array of calendars or a single calendar.
 *
 * @ingroup module_api
 *
 * @see _calendar_framework_build()
 */
function calendar_framework_calendars($op = 'calendars', $identifier = NULL) {
  list($calendars, $names) = _calendar_framework_build();

  switch ($op) {
    case 'calendars':
      return $calendars;

    case 'calendar':
        return is_array($calendars[$identifier]) ?
          array_merge($calendars[$identifier], array('identifier' => $identifier)) : NULL;

    case 'names':
      return $names;

    case 'name':
      return $names[$identifier];

    case 'identifiers':
      return array_keys($calendars);
  }
}


/**
 * API function to get current default calendar.
 *
 * @return
 *   An array of default calendar information.
 *
 * @ingroup module_api
 */
function calendar_framework_default() {
  return calendar_framework_calendars('calendar', variable_get('calendar_framework_default_calendar', 'gregorian'));
}


/**
 * API function to call a calendar function.
 *
 * @param $function
 *   Function "alias" to call.
 * @param $args
 *   An array arguments to be passed to $function.
 * @param $calendar
 *   Calendar name to call its $function.
 *
 * @retrun
 *   The returned value od called calendar function or NULL on fail.
 *
 * @ingroup module_api
 */
function calendar_framework_call($function, $args = array(), $calendar = '') {
  $calendar = empty($calendar) ?
    calendar_framework_default() :
    calendar_framework_calendars('calendar', $calendar);

  if (isset($calendar[$function]) && function_exists($calendar[$function])) {
    return call_user_func_array($calendar[$function], $args);
  }
  return NULL;
}


/**
 * Helper function to select the proper
 * calendar based on current user and language.
 *
 * @return
 *   Calendar identifier.
 *
 * @ingroup module_helper
 */
function _calendar_framework_select() {
  global $user;
  global $language;

  // Calendar per user.
  if (isset($user->calendar) && $user->calendar != 'default' && user_access('select different calendar')) {
    return calendar_framework_calendars('calendar', $user->calendar);
  }

  // Calendar per language.
  if ($calendar = variable_get('calendar_framework_' . $language->language . '_calendar', FALSE)) {
    return ($calendar == 'default') ? calendar_framework_default() : calendar_framework_calendars('calendar', $calendar);
  }

  return calendar_framework_default();
}


/**
 * Helper function to build a list of defined calendars.
 *
 * @return
 *   An array of available calendars.
 *
 * @ingroup module_helper
 */
function _calendar_framework_build() {
  $names = array();
  $calendars = array();

  $calendars_defined = module_invoke_all('calendar_info');
  foreach ($calendars_defined as $identifier => $info) {
    // Skip lazy modules without a format callback.
    if (!isset($info['format callback']) || !function_exists($info['format callback'])) {
      continue;
    }

    $info['config'] = variable_get('calendar_framework_settings_' . $identifier, '');
    $calendars[$identifier] = $info;
    $names[$identifier] = $info['name'];
  }

  return array($calendars, $names);
}


/**
 * API function acting as a fallback for 3rdparty calendar framework modules.
 *
 * Modules formatter callbacks that does not define a particular
 * format should pass the format to this API function, so the timestamp
 * will get formatted by the default formatter.
 *
 * @param $timestamp
 *   Unix timestamp to be formatted.
 * @param $format
 *   Date format as required by PHP date().
 * @param $timezone
 *   Time zone offset in seconds.
 *
 * @return
 *   Formatted date based on the passed $format.
 *
 * @ingroup module_api
 *
 * @todo Pass it through the format_date() once it got improved.
 */
function calendar_framework_formatter($timestamp, $format, $timezone = 0) {
  $date = '';
  $max = strlen($format);

  for ($i = 0; $i < $max; $i++) {
    $c = $format[$i];
    if (strpos('AaDlM', $c) !== FALSE) {
      $date .= t(gmdate($c, $timestamp), array(), $langcode);
    }
    elseif ($c == 'F') {
      $date .= trim(t('!long-month-name '. gmdate($c, $timestamp), array('!long-month-name' => ''), $langcode));
    }
    elseif (strpos('BdgGhHiIjLmnsStTUwWYyz', $c) !== FALSE) {
      $date .= gmdate($c, $timestamp);
    }
    elseif ($c == 'r') {
      $date .= format_date($timestamp - $timezone, 'custom', 'D, d M Y H:i:s O', $timezone, $langcode);
    }
    elseif ($c == 'O') {
      $date .= sprintf('%s%02d%02d', ($timezone < 0 ? '-' : '+'), abs($timezone / 3600), abs($timezone % 3600) / 60);
    }
    elseif ($c == 'Z') {
      $date .= $timezone;
    }
    elseif ($c == '\\') {
      $date .= $format[++$i];
    }
    else {
      $date .= date($c, $timestamp);
    }
  }

  return $date;
}


/**
 * Implements hook_calendar_info().
 *
 * This is the calendar_gregorian.module built into the
 * calendar_framework.module, So we got a default fake Gregorian calendar.
 *
 * @return
 *   An array of Gregorian calendar information.
 *
 * @ingroup hook_implementation
 */
function calendar_framework_calendar_info() {
  $calendar = array();

  $calendar['gregorian'] = array(
    'name' => t('Gregorian'),
    'format callback' => 'calendar_gregorian_formatter',
    'month days callback' => 'calendar_gregorian_month_days',
  );

  return $calendar;
}


/**
 * Gregorian calendar (fake) date formatter callback.
 *
 * @param $timestamp
 *   Unix timestamp to be formatted.
 *   The proper timezone value has been added by the native format_date().
 * @param $type
 *   The format to use. Can be "small", "medium" or "large" for the preconfigured
 *   date formats. If "custom" is specified, then $format is required as well.
 * @param $format
 *   PHP date() function format string.
 * @param $langcode
 *   Optional language code to translate to a language other than the default.
 * @param $calendar
 *   A copy of calendar information.
 *
 * @return
 *   The formatted date or FALSE otherwise.
 *
 * @see format_date()
 *
 * @ingroup calendar_format_callback
 */
function calendar_gregorian_formatter($timestamp, $type, $format, $langcode, $calendar) {
  return FALSE;
}


/**
 * Calendar month days helper. Also acts as a fallback
 * for a missing calendar_module_month_days() callback.
 *
 * @return
 *   An array of ordered numbers corresponding
 *   to a Gregorian year monthes length of days.
 *
 * @ingroup calendar_helper
 */
function calendar_gregorian_month_days() {
  return array(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31);
}
